#+title: Reverse String

* Attempt 1: Recursion

#+begin_src rustic
  fn reverse_helper<'a>(s: &'a str, acc: Vec<&'a str>) -> Vec<&'a str> {
      if s.is_empty() {
          return acc
      } else {
          reverse_helper(
              &s[1..],
              Vec::from_iter(acc.into_iter().chain(std::iter::once(&s[0..1])))
          )
      }
  }

  pub fn reverse(input: &str) -> String {
      reverse_helper(input, vec![])
          .join("")
  }
#+end_src

This compiles, but it fails on most tests:

#+begin_src shell
  $ cargo test -- --include-ignored
     Compiling reverse_string v1.2.0 (/Users/<user>/Library/CloudStorage/Dropbox/projects/Exercism/rust/reverse-string)
      Finished test [unoptimized + debuginfo] target(s) in 0.21s
       Running unittests src/lib.rs (target/debug/deps/reverse_string-56100ce089eddbaa)

  running 0 tests

  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

       Running tests/reverse-string.rs (target/debug/deps/reverse_string-b35f4a0a7c37f5db)

  running 7 tests
  test test_a_palindrome ... ok
  test test_an_empty_string ... ok
  test test_a_capitalized_word ... FAILED
  test test_wide_characters ... FAILED
  test test_an_even_sized_word ... FAILED
  test test_a_sentence_with_punctuation ... FAILED
  test test_a_word ... FAILED

  failures:

  ---- test_a_capitalized_word stdout ----
  thread 'test_a_capitalized_word' panicked at 'assertion failed: `(left == right)`
    left: `"Ramen"`,
   right: `"nemaR"`', tests/reverse-string.rs:12:5
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

  ---- test_wide_characters stdout ----
  thread 'test_wide_characters' panicked at 'byte index 1 is not a char boundary; it is inside '子' (bytes 0..3) of `子猫`', src/lib.rs:10:14

  ---- test_an_even_sized_word stdout ----
  thread 'test_an_even_sized_word' panicked at 'assertion failed: `(left == right)`
    left: `"drawer"`,
   right: `"reward"`', tests/reverse-string.rs:12:5

  ---- test_a_sentence_with_punctuation stdout ----
  thread 'test_a_sentence_with_punctuation' panicked at 'assertion failed: `(left == right)`
    left: `"I'm hungry!"`,
   right: `"!yrgnuh m'I"`', tests/reverse-string.rs:12:5

  ---- test_a_word stdout ----
  thread 'test_a_word' panicked at 'assertion failed: `(left == right)`
    left: `"robot"`,
   right: `"tobor"`', tests/reverse-string.rs:12:5


  failures:
      test_a_capitalized_word
      test_a_sentence_with_punctuation
      test_a_word
      test_an_even_sized_word
      test_wide_characters

  test result: FAILED. 2 passed; 5 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

  error: test failed, to rerun pass `--test reverse-string`
#+end_src

Note that one of the failed tests involved wide characters, so you need to do
something like =s.chars()=; see [[https://doc.rust-lang.org/stable/book/ch08-02-strings.html#methods-for-iterating-over-strings][Methods for Iterating Over Strings | The Rust
Programming Language (§8.2)]].

#+begin_src rustic
  fn reverse_helper<'a>(s: &'a str, acc: Vec<&'a str>) -> Vec<&'a str> {
      if s.is_empty() {
          return acc
      } else {
          let mut new_vec = acc.clone();
          new_vec.push(&s[0..1]);
          reverse_helper(&s[1..], new_vec)
      }
  }
#+end_src

This still led to the same errors. Ohhh, I think I know what the issue is: I'm
attempting to do this how I would in Lisp, but instead of ~cons~​ing onto the
/front/ of a list, I'm appending onto the /end/ of a vector :facepalm:

Fixed:

#+begin_src rustic
  fn reverse_helper<'a>(s: &'a str, acc: Vec<&'a str>) -> Vec<&'a str> {
      if s.is_empty() {
          return acc
      } else {
          let mut new_vec = vec!(&s[0..1]);
          new_vec.extend(acc);
          reverse_helper(&s[1..], new_vec)
      }
  }

  pub fn reverse(input: &str) -> String {
      reverse_helper(input, vec![])
          .join("")
  }
#+end_src

As expected, still failing the test for wide characters, but I'm passing
everything else.

** Immutably concatenating vectors
See the last part of [[https://stackoverflow.com/a/74881888/2677392][What is the best way to concatenate vectors in Rust? |
stackoverflow]] (note that ~std::iter::concat~ doesn't exist, so ignore that part
of the answer).

#+begin_src rustic
  let new_acc = [&vec!(c)[..], &acc].concat();
#+end_src
